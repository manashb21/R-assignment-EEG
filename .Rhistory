UB = x_mean + 1.645*sqrt(4/20)
print(c(LB, UB))
#ex-3
lambda =2
n = 50
x = rpois(n, lambda)
hist(x)
lambda = 0:10
loglike_lambda = log(((lambda^sum(x))*exp(-n*lambda))/prod(factorial(x)))
plot(lambda, loglike_lambda)
lambda = 0:15
loglike_lambda = log(((lambda^sum(x))*exp(-n*lambda))/prod(factorial(x)))
plot(lambda, loglike_lambda)
#ex-3
lambda =2
n = 50
set.seed(50)
x = rpois(n, lambda)
hist(x)
lambda = 0:15
loglike_lambda = log(((lambda^sum(x))*exp(-n*lambda))/prod(factorial(x)))
plot(lambda, loglike_lambda)
x = seq(0,10,0.4)
print(x)
x = seq(0:10,0.4)
x = seq(0, 10, 0.4)
print(x)
x = seq(0, 10, by = 0.4)
print(x)
y = 2 + 0.5*x + 0.3*x^2
x = seq(0, 10, by = 0.4)
print(x)
y = 2 + 0.5*x + 0.3*x^2
y = y + rnorm(length(y), 0, 0.1)
plot(x, y)
install.packages("matlib")
#import X data
X = as.matrix(read.csv("X.csv", header = F))
#import X data
X = as.matrix(read.csv("X.csv", header = F))
#import X data
X = as.matrix(read.csv("\X.csv", header = F))
#import X data
X = as.matrix(read.csv("/X.csv", header = F))
#import X data
X = as.matrix(read.csv("G:/R Assignment/X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
#import Y data
Y = as.matrix(read.csv("G:/R Assignment/y.csv", header = F))
colnames(Y) <- c("Y")
#import time data
time = read.csv("G:/R Assignment/time.csv", header = F, skip = 1)
time = as.matrix(rbind(0, time))
X
head(X)
head(Y)
head(time)
#import X data
X = as.matrix(read.csv("G:/R Assignment/X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
#import Y data
Y = as.matrix(read.csv("G:/R Assignment/y.csv", header = F))
colnames(Y) <- c("Y")
#import time data
time = read.csv("G:/R Assignment/time.csv", header = F, skip = 1)
time = as.matrix(rbind(0, time))
head(time)
setwd("G:/R Assignment")
X = as.matrix(read.csv("X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
#import X data
X = as.matrix(read.csv("X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
#import Y data
Y = as.matrix(read.csv("y.csv", header = F))
colnames(Y) <- c("Y")
#import time data
time = read.csv("time.csv", header = F, skip = 1)
time = as.matrix(rbind(0, time))
X
head(X)
head(time)
tail(time)
X.ts <- ts(X, start = c(min(time), max(time)),frequency = 1)
Y.ts <- ts(Y, start = c(min(time), max(time)),frequency = 1)
#plotting the graphs
plot(X.ts, main = "Time series plot of X signal", xlab = "Time", ylab = "Input Signal")
plot(Y.ts, main = "Time series plot of Y signal", xlab = "Time", ylab = "Output Signal")
ggplot(X, aes(x = time, y = signals))
ggplot2(X, aes(x = time, y = signals))
library(ggplot2)
ggplot2(X, aes(x = time, y = signals))
ggplot(X, aes(x = time, y = signals))
setwd("G:/R Assignment")
library(ggplot2)
X = read.csv("X.csv")
head(X)
colnames(X) <- c("X1", "X2", "X3", "X4")
head(X)
ggplot(X, aes(x = "Time", y = "Frequency"))
geom_line()
ggplot(X, aes(x = "Time", y = "Frequency"))
geom_line()
ggplot(X, aes(x = "Time", y = "Frequency", color=X1))
geom_line()
ggplot(X, aes(x = "Time", y = "Frequency"))
geom_line()
ggplot(X, aes(x = "Time", y = "Frequency"))+
geom_line()
ggplot(X, aes(x = "Time", y = "Frequency"))+
geom_line()
p = ggplot(X, aes(x = "Time", y = "Frequency"))+
geom_line()
show(p)
plot(p)
p = ggplot(X, aes(x = "Time", y = "Frequency"))+
geom_line()
plot(p)
Y = read.csv("Y.csv")
Y = read.csv("y.csv")
p2 = ggplot(Y, aes (x = "Time", y = "Frequency"))+geom_line()
plot(p2)
library(ggplot2)
Y = read.csv("y.csv")
p2 = ggplot(Y, aes (x = "Time", y = "Frequency"))+geom_line()
plot(p2)
time = read.csv("time.csv")
library(ggplot2)
X = read.csv("X.csv")
colnames(X) <- c("X1", "X2", "X3", "X4")
Y = read.csv("y.csv")
time = read.csv("time.csv")
p = ggplot(X, aes(x = time , y = X))+
geom_line()
plot(p)
length(X)
length(time)
nrow(X)
nrow(time)
head(X.ts)
X.ts <- rbind(X, time)
X.ts <- rbind(X, time)
X.ts <- cbind(X, time)
head(X.ts)
head(time)
library(ggplot2)
X = read.csv("X.csv")
colnames(X) <- c("X1", "X2", "X3", "X4")
Y = read.csv("y.csv")
time = read.csv("time.csv")
X.ts <- cbind(X, time)
head(X.ts)
p = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
plot(p)
p = ggplot(X.ts, aes(x = X0 , X1, X2, X3, X4))+
geom_line()
plot(p)
p = ggplot(X.ts, aes(X0 , X1, X2, X3, X4))+
geom_line()
plot(p)
p = ggplot(X.ts, aes(x = X0 , y = [X1, X2, X3, X4]))+
p = ggplot(X.ts, aes(x = X0 , y = (X1, X2, X3, X4)))+
plot(p)
p = ggplot(X.ts, aes(x = X0 , y = (X1:X4)))+
geom_line()
plot(p)
p = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
plot(p)
p1 = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
plot(p)
p2 = ggplot(X.ts, aes(x = X0 , y = X2))+
geom_line()
plot(p2)
par(mfrow = c(4,1))
p1 = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
plot(p)
p2 = ggplot(X.ts, aes(x = X0 , y = X2))+
geom_line()
plot(p2)
library(cowplot)
install.packages("cowplot")
library(cowplot)
p1 = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
p2 = ggplot(X.ts, aes(x = X0 , y = X2))+
geom_line()
plot_grid(p1, p2, labels = "AUTO")
cowplot:plot_grid(p1, p2, labels = "AUTO")
cowplot::plot_grid(p1, p2, labels = "AUTO")
p1 = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
p2 = ggplot(X.ts, aes(x = X0 , y = X2))+
geom_line()
p3 = ggplot(X.ts, aes(x = X0 , y = X3))+
geom_line()
p4 = ggplot(X.ts, aes(x = X0 , y = X4))+
geom_line()
cowplot::plot_grid(p1, p2, p3, p4, labels = "AUTO")
p1 = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
p2 = ggplot(X.ts, aes(x = X0 , y = X2))+
geom_line()
p3 = ggplot(X.ts, aes(x = X0 , y = X3))+
geom_line()
p4 = ggplot(X.ts, aes(x = X0 , y = X4))+
geom_line()
plot(p1, p2, p3, p4)
plot(p1)
par(mfrow = c(4,1))
plot(p1)
plot(p2)
plot(p3)
plot(p4)
par(mfrow = c(4,1))
p1 = ggplot(X.ts, aes(x = X0 , y = X1))+
geom_line()
p2 = ggplot(X.ts, aes(x = X0 , y = X2))+
geom_line()
p3 = ggplot(X.ts, aes(x = X0 , y = X3))+
geom_line()
p4 = ggplot(X.ts, aes(x = X0 , y = X4))+
geom_line()
plot(p1)
plot(p2)
plot(p3)
plot(p4)
head(time)
#import time data
time = read.csv("time.csv", header = F, skip = 1)
head(time)
time = as.matrix(rbind(0, time))
time
head(time)
#import X data
X = as.matrix(read.csv("X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
#import Y data
Y = as.matrix(read.csv("y.csv", header = F))
colnames(Y) <- c("Y")
#import time data
time = read.csv("time.csv", header = F, skip = 1)
time = as.matrix(rbind(0, time))
X.ts <- ts(X, start = c(min(time), max(time)),frequency = 1)
Y.ts <- ts(Y, start = c(min(time), max(time)),frequency = 1)
#plotting the graphs
plot(X.ts, main = "Time series plot of X signal", xlab = "Time", ylab = "Input Signal")
plot(Y.ts, main = "Time series plot of Y signal", xlab = "Time", ylab = "Output Signal")
head(time, n = 10)
tail(time)
#Creating density plot
library(ggplot2)
dis = denstiy(X)
dis = density(X)
ggplot(dis)
ggplot(X) + geom_density()
Xdf = read.csv("X.csv")
ggplot(Xdf) + geom_density()
ggplot(Xdf, aes = x) + geom_density()
Xdf
Xdf = read.csv("X.csv")
colnames(Xdf) <- c("X1", "X2", "X3", "X4")
hed(Xdf)
head(Xdf)
library(ggplot2)
#dis = density(X)
ggplot(Xdf, aes = x) + geom_density()
#dis = density(X)
ggplot(Xdf, aes(x1)) + geom_density()
#dis = density(X)
ggplot(Xdf, aes(X1)) + geom_density()
#Creating density plot
dis = density(X)
plot(dis, main = "Density Plot of Whole Input Signal")
#histogram of X signal
hist(dis)
#histogram of X signal
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
dis = density(X)
par(mfrow = c(1,2))
plot(dis, main = "Density Plot of Whole Input Signal")
#histogram of X signal
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
dis = density(X)
par(mfrow = c(1,2))
plot(dis, main = "Density Plot of Input Signal")
#histogram of X signal
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
lines(dis, lwd = 2, col = "aquamarine")
rug(jitter(X))
#import X data
X = as.matrix(read.csv("X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
Xdf = read.csv("X.csv")
colnames(Xdf) <- c("X1", "X2", "X3", "X4")
#import Y data
Y = as.matrix(read.csv("y.csv", header = F))
colnames(Y) <- c("Y")
#import time data
time = read.csv("time.csv", header = F, skip = 1)
time = as.matrix(rbind(0, time))
#Creating Time series Plot
#create time series objects
X.ts <- ts(X, start = c(min(time), max(time)),frequency = 1)
Y.ts <- ts(Y, start = c(min(time), max(time)),frequency = 1)
#plotting the graphs
plot(X.ts, main = "Time series plot of X signal", xlab = "Time", ylab = "Input Signal")
plot(Y.ts, main = "Time series plot of Y signal", xlab = "Time", ylab = "Output Signal")
#Creating density plot
#density plot of X signal
dis = density(X)
par(mfrow = c(1,2))
plot(dis, main = "Density Plot of Input Signal")
#histogram of X signal
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
#both density and histogram
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
lines(dis, lwd = 2, col = "aquamarine")
rug(jitter(X))
#import X data
X = as.matrix(read.csv("X.csv", header = F))
colnames(X) <- c("X1", "X2", "X3", "X4")
Xdf = read.csv("X.csv")
colnames(Xdf) <- c("X1", "X2", "X3", "X4")
#import Y data
Y = as.matrix(read.csv("y.csv", header = F))
colnames(Y) <- c("Y")
#import time data
time = read.csv("time.csv", header = F, skip = 1)
time = as.matrix(rbind(0, time))
#Creating Time series Plot
#create time series objects
X.ts <- ts(X, start = c(min(time), max(time)),frequency = 1)
Y.ts <- ts(Y, start = c(min(time), max(time)),frequency = 1)
#plotting the graphs
plot(X.ts, main = "Time series plot of X signal", xlab = "Time", ylab = "Input Signal")
plot(Y.ts, main = "Time series plot of Y signal", xlab = "Time", ylab = "Output Signal")
#Creating density plot
#density plot of X signal
dis = density(X)
par(mfrow = c(1,2))
plot(dis, main = "Density Plot of Input Signal")
#histogram of X signal
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
#both density and histogram
par(mfrow = c(1,1))
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
lines(dis, lwd = 2, col = "aquamarine")
rug(jitter(X))
par(mfrow = c(1,1))
hist(X, freq = FALSE, main = "Histogram Plot of Input Signal")
lines(dis, lwd = 2, col = "darkblue")
rug(jitter(X))
#density plot of X1 signal
dis_X1 = density(X[,"X1"])
hist(X[,"X1"], freq = FALSE, main = "Histogram Plot of X1")
lines(dis, lwd = 2, col = "darkblue")
rug(jitter(X[,"X1"]))
dis_X1 = density(X[,"X1"])
hist(X[,"X1"], freq = FALSE, main = "Histogram Plot of X1")
lines(dis, lwd = 2, col = "cadetblue")
rug(jitter(X[,"X1"]))
#density plot of X1 signal
dis_X1 = density(X[,"X1"])
hist(X[,"X1"], freq = FALSE, main = "Histogram Plot of X1")
lines(dis_X1, lwd = 2, col = "orange")
rug(jitter(X[,"X1"]))
#density plot of X2 signal
dis_X2 = density(X[,"X2"])
hist(X[,"X2"], freq = FALSE, main = "Histogram Plot of X2")
lines(dis_X2, lwd = 2, col = "cadetblue")
rug(jitter(X[,"X2"]))
#density plot of X3 signal
dis_X3 = density(X[,"X3"])
hist(X[,"X3"], freq = FALSE, main = "Histogram Plot of X3")
lines(dis_X3, lwd = 2, col = "cadetblue")
rug(jitter(X[,"X3"]))
#density plot of X4 signal
dis_X4 = density(X[,"X4"])
hist(X[,"X4"], freq = FALSE, main = "Histogram Plot of X4")
lines(dis_X4, lwd = 2, col = "cadetblue")
rug(jitter(X[,"X4"]))
head(y)
head(Y)
#density plot of X3 signal
dis_X3 = density(X[,"X3"])
hist(X[,"X3"], freq = FALSE, main = "Histogram Plot of X3")
lines(dis_X3, lwd = 2, col = "aquamarine2")
rug(jitter(X[,"X3"]))
#density plot of X4 signal
dis_X4 = density(X[,"X4"])
hist(X[,"X4"], freq = FALSE, main = "Histogram Plot of X4")
lines(dis_X4, lwd = 2, col = "seagreen")
rug(jitter(X[,"X4"]))
#density plot of Y signal
#density plot of X1 signal
dis_Y = density(Y)
hist(Y, freq = FALSE, main = "Histogram Plot of Y")
lines(dis_Y, lwd = 2, col = "purple")
rug(jitter(Y))
#correlation between X1 and Y
plot(X1, Y)
#correlation between X1 and Y
plot(X[,"X1"], Y)
plot(X[,"X1"], Y, main = "Correlation between X1 and Y signal", xlab = "X1 signal",
ylab = "Output Signal")
#correlation between X1 and Y
plot(X[,"X1"], Y, main = "Scatter Plot: X1 and Y signal", xlab = "X1 signal",
ylab = "Output Signal")
#scatter plot between X1 and Y
par(mfrow = c(2,2))
plot(X[,"X1"], Y, main = "Scatter Plot: X1 and Y signal", xlab = "X1 signal",
ylab = "Output Signal")
#scatter plot between X2 and Y
plot(X[,"X2"], Y, main = "Scatter Plot: X2 and Y signal", xlab = "X2 signal",
ylab = "Output Signal")
#scatter plot between X3 and Y
plot(X[,"X3"], Y, main = "Scatter Plot: X3 and Y signal", xlab = "X3 signal",
ylab = "Output Signal")
#scatter plot between X4 and Y
plot(X[,"X4"], Y, main = "Scatter Plot: X4 and Y signal", xlab = "X4 signal",
ylab = "Output Signal")
#correlation
install.packaged("corrplot")
#correlation
install.packages("corrplot")
#correlation
#install.packages("corrplot")
library(corrplot)
cor_df = cbind(X, Y)
head(cor_df)
cor(cor_df)
cor_tab = cor(cor_df)
corrplot(cor_tab, method = "number")
#correlation
#install.packages("corrplot")
par(mfrow = c(1,1))
library(corrplot)
cor_df = cbind(X, Y)
cor_tab = cor(cor_df)
corrplot(cor_tab, method = "number")
#correlation
#install.packages("corrplot")
par(mfrow = c(1,1))
library(corrplot)
cor_df = cbind(X[,"X1"], Y)
cor_tab = cor(cor_df)
corrplot(cor_tab, method = "number")
cor_tab
cor_df
head(cor_df)
#correlation
#install.packages("corrplot")
par(mfrow = c(1,1))
library(corrplot)
cor_df = cbind(X[,"X1"], Y)
colnames(cor_df) <- c("X1", "Y")
cor_tab = cor(cor_df)
corrplot(cor_tab, method = "number")
#correlation
#install.packages("corrplot")
par(mfrow = c(1,1))
library(corrplot)
cor_df = cbind(X, Y)
colnames(cor_df) <- c("X", "Y")
#correlation
#install.packages("corrplot")
par(mfrow = c(1,1))
library(corrplot)
cor_df = cbind(X, Y)
cor_tab = cor(cor_df)
corrplot(cor_tab, method = "number", type = "upper")
plot(X[,"X1"], Y, main = "Scatter Plot: X1 and Y signal", xlab = "X1 signal",
ylab = "Output Signal")
abline(lm(X[,'X1'] ~ Y), col = 'red')
#scatter plot between X1 and Y
par(mfrow = c(2,2))
plot(X[,"X1"], Y, main = "Scatter Plot: X1 and Y signal", xlab = "X1 signal",
ylab = "Output Signal")
abline(lm(X[,'X1'] ~ Y), col = 'red')
#scatter plot between X2 and Y
plot(X[,"X2"], Y, main = "Scatter Plot: X2 and Y signal", xlab = "X2 signal",
ylab = "Output Signal")
abline(lm(X[,'X2'] ~ Y), col = 'red')
#scatter plot between X3 and Y
plot(X[,"X3"], Y, main = "Scatter Plot: X3 and Y signal", xlab = "X3 signal",
ylab = "Output Signal")
abline(lm(X[,'X3'] ~ Y), col = 'red')
#scatter plot between X4 and Y
plot(X[,"X4"], Y, main = "Scatter Plot: X4 and Y signal", xlab = "X4 signal",
ylab = "Output Signal")
abline(lm(X[,'X4'] ~ Y), col = 'red')
#scatter plot between X1 and Y
par(mfrow = c(2,2))
plot(X[,"X1"], Y, main = "Scatter Plot: X1 and Y signal", xlab = "X1 signal",
ylab = "Output Signal")
abline(lm(X[,'X1'] ~ Y), col = 'red')
#scatter plot between X2 and Y
plot(X[,"X2"], Y, main = "Scatter Plot: X2 and Y signal", xlab = "X2 signal",
ylab = "Output Signal")
abline(lm(X[,'X2'] ~ Y), col = 'red')
#scatter plot between X3 and Y
plot(X[,"X3"], Y, main = "Scatter Plot: X3 and Y signal", xlab = "X3 signal",
ylab = "Output Signal")
abline(lm(X[,'X3'] ~ Y), col = 'red')
#scatter plot between X4 and Y
plot(X[,"X4"], Y, main = "Scatter Plot: X4 and Y signal", xlab = "X4 signal",
ylab = "Output Signal")
abline(lm(X[,'X4'] ~ Y), col = 'red')
